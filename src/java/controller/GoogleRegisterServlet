
package controller;

import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.oauth2.Oauth2;
import com.google.api.services.oauth2.model.Userinfo;

import dao.UsersDAO;
import model.Users;
import mailservice.EmailUtil;

import java.io.IOException;
import java.util.Collections;
import java.util.UUID;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/google_register")
public class GoogleRegisterServlet extends HttpServlet {

    private static final String CLIENT_ID = "234087701127-r72cj5ltijht36hd03ragcki1hqd3e4r.apps.googleusercontent.com";
    private static final String CLIENT_SECRET = "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";
    private static final String REDIRECT_URI = "http://localhost:9999/medicine/google_register";

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static HttpTransport HTTP_TRANSPORT;

    private static AuthorizationCodeFlow flow;

    static {
        try {
            HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();

            flow = new GoogleAuthorizationCodeFlow.Builder(
                    HTTP_TRANSPORT, JSON_FACTORY,
                    CLIENT_ID, CLIENT_SECRET,
                    Collections.singletonList("https://www.googleapis.com/auth/userinfo.profile email")
            ).setAccessType("offline").build();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String code = request.getParameter("code");

        if (code == null || code.isEmpty()) {
            AuthorizationCodeRequestUrl authorizationUrl = flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI);
            response.sendRedirect(authorizationUrl.build());
        } else {
            try {
                GoogleTokenResponse tokenResponse = (GoogleTokenResponse) flow.newTokenRequest(code)
                        .setRedirectUri(REDIRECT_URI).execute();
                Credential credential = flow.createAndStoreCredential(tokenResponse, "user");

                Oauth2 oauth2 = new Oauth2.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)
                        .setApplicationName("Medicine").build();

                Userinfo userInfo = oauth2.userinfo().get().execute();

                if (userInfo != null && userInfo.getEmail() != null) {
                    HttpSession session = request.getSession();
                    UsersDAO usersDAO = new UsersDAO();
                    Users user = usersDAO.findByEmail(userInfo.getEmail());

                    if (user == null) {
                        String username = userInfo.getEmail().split("@")[0].replace(".", "_");
                        String password = UUID.randomUUID().toString().substring(0, 8);
                        user = new Users(0, userInfo.getEmail(), username, password, "customer", true);
                        usersDAO.insert(user);

                        String subject = "Your Registration Password";
                        String content = "<h3>Welcome, " + userInfo.getName() + "!</h3>"
                                + "<p>Your password: <b>" + password + "</b></p>"
                                + "<p>Please change your password after logging in.</p>";
                        EmailUtil.sendEmail(userInfo.getEmail(), subject, content);

                        session.setAttribute("user", user);
                        session.setAttribute("userName", username);
                        session.setAttribute("email", userInfo.getEmail());
                        session.setAttribute("role", "customer");

                        response.sendRedirect("home");
                    } else {
                        session.setAttribute("tempEmail", userInfo.getEmail());
                        session.setAttribute("tempName", userInfo.getName());
                        request.setAttribute("registerError", "Email đã được đăng ký! Vui lòng đăng nhập.");
                        request.getRequestDispatcher("login.jsp").forward(request, response);
                    }
                } else {
                    request.setAttribute("registerError", "Không thể lấy thông tin từ Google!");
                    request.getRequestDispatcher("register.jsp").forward(request, response);
                }
            } catch (Exception e) {
                e.printStackTrace();
                request.setAttribute("registerError", "Đăng ký Google thất bại!");
                request.getRequestDispatcher("register.jsp").forward(request, response);
            }
        }
    }
}
