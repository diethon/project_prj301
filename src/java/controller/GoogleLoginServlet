
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.oauth2.Oauth2;
import com.google.api.services.oauth2.model.Userinfo;

import dao.UsersDAO;
import model.Users;

import java.io.IOException;
import java.util.Collections;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/google_login")
public class GoogleLoginServlet extends HttpServlet {

    private static final String CLIENT_ID = "331383638235-gu4j2n1e3n53114r01firn78q7cueul7.apps.googleusercontent.com";
    private static final String CLIENT_SECRET = "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";
    private static final String REDIRECT_URI = "http://localhost:8080/medicine/google_login";

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static HttpTransport HTTP_TRANSPORT;

    private static AuthorizationCodeFlow flow;

    static {
        try {
            HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();

            flow = new GoogleAuthorizationCodeFlow.Builder(
                    HTTP_TRANSPORT, JSON_FACTORY,
                    CLIENT_ID, CLIENT_SECRET,
                    Collections.singletonList("https://www.googleapis.com/auth/userinfo.profile email")
            ).setAccessType("offline").build();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String code = request.getParameter("code");

        if (code == null || code.isEmpty()) {
            AuthorizationCodeRequestUrl authorizationUrl = flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI);
            response.sendRedirect(authorizationUrl.build());
        } else {
            try {
                GoogleTokenResponse tokenResponse = (GoogleTokenResponse) flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();
                Credential credential = flow.createAndStoreCredential(tokenResponse, "user");

                Oauth2 oauth2 = new Oauth2.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)
                        .setApplicationName("Medicine").build();

                Userinfo userInfo = oauth2.userinfo().get().execute();

                if (userInfo != null && userInfo.getEmail() != null) {
                    HttpSession session = request.getSession();
                    UsersDAO usersDAO = new UsersDAO();
                    Users user = usersDAO.findByEmail(userInfo.getEmail());

                    if (user == null) {
                        session.setAttribute("tempEmail", userInfo.getEmail());
                        session.setAttribute("tempName", userInfo.getName());
                        request.setAttribute("registerError", "Tài khoản của bạn chưa đăng ký!");
                        request.getRequestDispatcher("register.jsp").forward(request, response);
                        return;
                    }

                    session.setAttribute("user", user);
                    session.setAttribute("userName", user.getUsername());
                    session.setAttribute("email", user.getMail());
                    session.setAttribute("role", user.getRole());

                    response.sendRedirect("home");
                } else {
                    request.setAttribute("loginError", "Không thể lấy thông tin từ Google!");
                    request.getRequestDispatcher("login.jsp").forward(request, response);
                }
            } catch (Exception e) {
                e.printStackTrace();
                request.setAttribute("loginError", "Đăng nhập Google thất bại!");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }
        }
    }

}
